{"name":"socket_select","purpose":"Runs the select() system call on the given arrays of sockets with a specified timeout","manualid":"function.socket-select","version":"PHP 4 >= 4.1.0, PHP 5","params":[{"name":"read","type":"array","optional":"false"},{"name":"write","type":"array","optional":"false"},{"name":"except","type":"array","optional":"false"},{"name":"tv_sec","type":"int","optional":"false"},{"name":"tv_usec","type":"int","optional":"true"}],"return":{"type":"int","description":"On success socket_select returns the number of\n   socket resources contained in the modified arrays, which may be zero if\n   the timeout expires before anything interesting happens. On error FALSE\n   is returned. The error code can be retrieved with\n   socket_last_error.Be sure to use the === operator when checking for an\n    error. Since the socket_select may return 0 the\n    comparison with == would evaluate to TRUE:\n    \n     Understanding socket_select's result\n     \n\n<?php\n$e = NULL;\nif (false === socket_select($r, $w, $e, 0)) {\n    echo \"socket_select() failed, reason: \" .\n        socket_strerror(socket_last_error()) . \"\\n\";\n}\n?>"},"errors":null,"notes":[{"type":"note","description":"Be aware that some socket implementations need to be handled very\n    carefully. A few basic rules:\n    \n     \n      \n       You should always try to use socket_select\n       without timeout. Your program should have nothing to do if there is\n       no data available. Code that depends on timeouts is not usually\n       portable and difficult to debug.\n      \n     \n     \n      \n       No socket resource must be added to any set if you do not intend to\n       check its result after the socket_select call,\n       and respond appropriately. After socket_select\n       returns, all socket resources in all arrays must be checked. Any\n       socket resource that is available for writing must be written to, and\n       any socket resource available for reading must be read from.\n      \n     \n     \n      \n       If you read\/write to a socket returns in the arrays be aware that\n       they do not necessarily read\/write the full amount of data you have\n       requested. Be prepared to even only be able to read\/write a single\n       byte.\n      \n     \n     \n      \n       It's common to most socket implementations that the only exception\n       caught with the except array is out-of-bound\n       data received on a socket."}],"changelog":[],"seealso":[{"type":"function","name":"socket_read"},{"type":"function","name":"socket_write"},{"type":"function","name":"socket_last_error"},{"type":"function","name":"socket_strerror"}]}