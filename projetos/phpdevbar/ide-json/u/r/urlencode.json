{"name":"urlencode","purpose":"URL-encodes string","manualid":"function.urlencode","version":"PHP 4, PHP 5","params":[{"name":"str","type":"string","optional":"false"}],"return":{"type":"string","description":"Returns a string in which all non-alphanumeric characters except\n   -_. have been replaced with a percent\n   (%) sign followed by two hex digits and spaces encoded\n   as plus (+) signs.  It is encoded the same way that the\n   posted data from a WWW form is encoded, that is the same way as in\n   application\/x-www-form-urlencoded media type. This\n   differs from the RFC 1738 encoding (see\n   rawurlencode) in that for historical reasons, spaces\n   are encoded as plus (+) signs."},"errors":null,"notes":[{"type":"note","description":"Be careful about variables that may match HTML entities. Things like\n    &amp, &copy and &pound are parsed by the browser and the\n    actual entity is used instead of the desired variable name.  This is an\n    obvious hassle that the W3C has been telling people about for years.\n    The reference is here: http:\/\/www.w3.org\/TR\/html4\/appendix\/notes.html#h-B.2.2.PHP supports changing the argument separator to the W3C-suggested\n    semi-colon through the arg_separator .ini directive.  Unfortunately most\n    user agents do not send form data in this semi-colon separated format.\n    A more portable way around this is to use &amp; instead of & as\n    the separator.  You don't need to change PHP's arg_separator for this.\n    Leave it as &, but simply encode your URLs using\n    htmlentities or \n    htmlspecialchars."}],"changelog":[],"seealso":[{"type":"function","name":"urldecode"},{"type":"function","name":"htmlentities"},{"type":"function","name":"rawurlencode"},{"type":"function","name":"rawurldecode"}]}