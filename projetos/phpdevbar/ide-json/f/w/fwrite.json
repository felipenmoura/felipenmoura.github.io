{"name":"fwrite","purpose":"Binary-safe file write","manualid":"function.fwrite","version":"PHP 4, PHP 5","params":[{"name":"handle","type":"resource","optional":"false"},{"name":"string","type":"string","optional":"false"},{"name":"length","type":"int","optional":"true"}],"return":{"type":"int","description":"fwrite returns the number of bytes\n   written, or FALSE on error."},"errors":null,"notes":[{"type":"note","description":"Writing to a network stream may end before the whole string is written.\n    Return value of fwrite may be checked:\n    \n\n<?php\nfunction fwrite_stream($fp, $string) {\n    for ($written = 0; $written < strlen($string); $written += $fwrite) {\n        $fwrite = fwrite($fp, substr($string, $written));\n        if ($fwrite === false) {\n            return $written;\n        }\n    }\n    return $written;\n}\n?>"},{"type":"note","description":"On systems which differentiate between binary and text files\n    (i.e. Windows) the file must be opened with 'b' included in\n    fopen mode parameter."},{"type":"note","description":"If handle was fopened in\n    append mode, fwrites are atomic (unless the size of\n    string exceeds the filesystem's block size, on some\n    platforms, and as long as the file is on a local filesystem). That is,\n    there is no need to flock a resource before calling\n    fwrite; all of the data will be written without\n    interruption."},{"type":"note","description":"If writing twice to the file pointer, then the data will be appended to \n    the end of the file content:\n        \n\n<?php\n$fp = fopen('data.txt', 'w');\nfwrite($fp, '1');\nfwrite($fp, '23');\nfclose($fp);\n\n\/\/ the content of 'data.txt' is now 123 and not 23!\n?>"}],"changelog":[],"seealso":[{"type":"function","name":"fread"},{"type":"function","name":"fopen"},{"type":"function","name":"fsockopen"},{"type":"function","name":"popen"},{"type":"function","name":"file_get_contents"}]}