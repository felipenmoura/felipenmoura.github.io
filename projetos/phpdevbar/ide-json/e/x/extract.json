{"name":"extract","purpose":"Import variables into the current symbol table from an array","manualid":"function.extract","version":"PHP 4, PHP 5","params":[{"name":"var_array","type":"array","optional":"false"},{"name":"extract_type","type":"int","optional":"true","initializer":"EXTR_OVERWRITE"},{"name":"prefix","type":"string","optional":"true"}],"return":{"type":"int","description":"Returns the number of variables successfully imported into the symbol\n   table."},"errors":null,"notes":[{"type":"warning","description":"Do not use extract on untrusted data, like\n    user input\n    (i.e. $_GET, $_FILES, etc.).\n    If you do, for example if you want to run old code that relies\n    on register_globals\n    temporarily, make sure you use one of the non-overwriting\n    extract_type values such as\n    EXTR_SKIP and be aware that you should extract\n    in the same order that's defined in\n    variables_order within the\n    php.ini."},{"type":"note","description":"If you\n    have register_globals\n    turned on and you use extract\n    on $_FILES and\n    specify EXTR_SKIP, you may be surprised at\n    the results.This is not recommended practice and is only documented here for\n     completeness. The use\n     of register_globals is\n     deprecated and calling extract on untrusted\n     data such as $_FILES is, as noted above, a\n     potential security risk. If you encounter this issue, it means\n     that you are using at least two poor coding practices.<?php\n\n\/* Suppose that $testfile is the name of a file upload input\n   and that register_globals is turned on. *\/\n\nvar_dump($testfile);\nextract($_FILES, EXTR_SKIP);\nvar_dump($testfile);\nvar_dump($testfile['tmp_name']);\n\n?>You might expect to see something like the following:string(14) \"\/tmp\/phpgCCPX8\"\narray(5) {\n  [\"name\"]=>\n  string(10) \"somefile.txt\"\n  [\"type\"]=>\n  string(24) \"application\/octet-stream\"\n  [\"tmp_name\"]=>\n  string(14) \"\/tmp\/phpgCCPX8\"\n  [\"error\"]=>\n  int(0)\n  [\"size\"]=>\n  int(4208)\n}\nstring(14) \"\/tmp\/phpgCCPX8\"However, you would instead see something like this:string(14) \"\/tmp\/phpgCCPX8\"\nstring(14) \"\/tmp\/phpgCCPX8\"\nstring(1) \"\/\"This is due to the fact that\n    since register_globals is\n    turned on, $testfile already exists in the\n    global scope when extract is called. And\n    since EXTR_SKIP is\n    specified, $testfile is not overwritten with\n    the contents of the $_FILES array\n    so $testfile remains a string.\n    Because strings may\n    be accessed using array syntax and the non-numeric string\n    tmp_name is interpreted\n    as 0, PHP\n    sees $testfile['tmp_name']\n    as $testfile[0]."}],"changelog":[{"version":"4.3.0","change":"EXTR_REFS was added."},{"version":"4.2.0","change":"EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS\n        were added."},{"version":"4.0.5","change":"This function now returns the number of variables extracted.\n        EXTR_PREFIX_INVALID was added.\n        EXTR_PREFIX_ALL includes numeric variables as well."}],"seealso":[{"type":"function","name":"compact"}]}