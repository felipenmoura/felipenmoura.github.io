{"name":"flock","purpose":"Portable advisory file locking","manualid":"function.flock","version":"PHP 4, PHP 5","params":[{"name":"handle","type":"resource","optional":"false"},{"name":"operation","type":"int","optional":"false"},{"name":"wouldblock","type":"int","optional":"true"}],"return":{"type":"bool","description":"Returns TRUE on success or FALSE on failure."},"errors":null,"notes":[{"type":"note","description":"flock locks mandatory under Windows aswell as some \n    POSIX based operating systems."},{"type":"note","description":"Because flock requires a file pointer, you may have\n    to use a special lock file to protect access to a file that you intend\n    to truncate by opening it in write mode (with a \"w\" or \"w+\" argument to\n    fopen)."},{"type":"note","description":"POSIX.1 compatible systems will release the scripts flock's \n    on a file, if the scripts uses fclose on any file handle \n    on that file."},{"type":"warning","description":"Assigning other value to handle argument in the\n    consecutive code would release the lock."},{"type":"warning","description":"On some operating systems flock is implemented at\n    the process level. When using a multithreaded server API like ISAPI you\n    may not be able to rely on flock to protect files\n    against other PHP scripts running in parallel threads of the same server\n    instance!flock is not supported on antiquated filesystems like\n    FAT and its derivates and will therefore always\n    return FALSE under this environments (this is especially true for\n    Windows 98 users)."}],"changelog":[{"version":"4.0.1","change":"The LOCK_XXX constants were added. Prior to that\n        you must use 1 for LOCK_SH, 2 for\n        LOCK_EX, 3 for LOCK_UN and\n        4 for LOCK_NB"}],"seealso":[]}