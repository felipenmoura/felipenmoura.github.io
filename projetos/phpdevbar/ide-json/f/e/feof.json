{"name":"feof","purpose":"Tests for end-of-file on a file pointer","manualid":"function.feof","version":"PHP 4, PHP 5","params":[{"name":"handle","type":"resource","optional":"false"}],"return":{"type":"bool","description":"Returns TRUE if the file pointer is at EOF or an error occurs\n   (including socket timeout); otherwise returns FALSE."},"errors":null,"notes":[{"type":"warning","description":"If a connection opened by fsockopen wasn't closed\n    by the server, feof will hang. To workaround this, see \n    below example:\n    \n     Handling timeouts with feof\n     \n\n<?php\nfunction safe_feof($fp, &start = NULL) {\n $start = microtime(true);\n\n return feof($fp);\n}\n\n\/* Assuming $fp is previously opened by fsockopen() *\/\n\n$start = NULL;\n$timeout = ini_get('default_socket_timeout');\n\nwhile(!safe_feof($fp, $start) && (microtime(true) - $start) < $timeout)\n{\n \/* Handle *\/\n}\n?>"},{"type":"warning","description":"If the passed file pointer is not valid you may get an infinite loop, because\n    feof fails to return TRUE.\n    \n     feof example with an invalid file pointer\n     \n\n<?php\n\/\/ if file can not be read or doesn't exist fopen function returns FALSE\n$file = @fopen(\"no_such_file\", \"r\");\n\n\/\/ FALSE from fopen will issue warning and result in infinite loop here\nwhile (!feof($file)) {\n}\n\nfclose($file);\n?>"}],"changelog":[],"seealso":[]}