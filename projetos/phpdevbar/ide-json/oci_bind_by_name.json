{"name":"oci_bind_by_name","purpose":"Binds a PHP variable to an Oracle placeholder","manualid":"function.oci-bind-by-name","version":"PHP 5, PECL OCI8 >= 1.1.0","params":[{"name":"statement","type":"resource","optional":"false"},{"name":"bv_name","type":"string","optional":"false"},{"name":"variable","type":"mixed","optional":"false"},{"name":"maxlength","type":"int","optional":"true","initializer":"-1"},{"name":"type","type":"int","optional":"true","initializer":"SQLT_CHR"}],"return":{"type":"bool","description":"Returns TRUE on success or FALSE on failure."},"errors":null,"notes":[{"type":"warning","description":"Do not use magic_quotes_gpc or\n    addslashes\n    and oci_bind_by_name simultaneously as no\n    quoting is needed. Any magically applied quotes will be written\n    into your database because oci_bind_by_name\n    inserts data verbatim and does not remove quotes or escape\n    characters."},{"type":"note","description":"If you bind a string to a CHAR column in\n    a WHERE clause, remember that Oracle uses\n    blank-padded comparison semantics for CHAR\n    columns.  Your PHP variable should be blank padded to the same\n    width as the column for the WHERE clause to\n    succeed."},{"type":"note","description":"The PHP variable argument is a reference.  Some\n     forms of loops do not work as expected:foreach ($myarray as $key => $value)  {\n    oci_bind_by_name($stid, $key, $value);\n}This binds each key to the location of $value, so all bound\n     variables end up pointing to the last loop iteration's\n     value. Instead use the following:foreach ($myarray as $key => $value) {\n    oci_bind_by_name($stid, $key, $myarray[$key]);\n}"},{"type":"note","description":"In PHP versions before 5.0.0 you must\n    use ocibindbyname\n    instead. The old function name can still be used\nin current versions, however it is deprecated and not recommended."}],"changelog":[],"seealso":[{"type":"function","name":"oci_bind_array_by_name"},{"type":"function","name":"oci_parse"}]}