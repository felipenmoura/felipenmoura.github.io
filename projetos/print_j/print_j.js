function print_j(o, level, forcedName){var rec='color:red;';var braces='font-weight:bold;color:purple;';var charString='font-weight:bold;color:#777;';var numbers='font-weight:normal;color:#c72;';var elements='font-weight:bold;color:#339;';var limit= 12;  level= level||'      ';if(level.length>limit*6) return '\n';var name= document.attachEvent? 'varName=IE FAILED AGAIN': '<nobr>anonymous</nobr>';var ret ="<div style='margin-left:"+(level.length/6 * 12)+"px;font-size:14px;padding-left:4px;border:dashed 1px #aac;background-color:#e7e7f0;color:#339;'><pre style='font-family:Courier-New;'>";if(!forcedName)  { for(var tmp in window)   {  try    {   if(window[tmp] === o)     {    name= tmp;    delete tmp;    break;   }    }catch(e)     {    try      {     if(eval("window."+tmp) === o)       {      name= tmp;      delete tmp;      break;     }      }catch(err){}     }   }  }else{  name= forcedName;  }var type= o.constructor == Array? 'Array': o.constructor == Object? 'Object': o.constructor == Function? 'Function': typeof o;type= type =='object'? 'Object': type;  if(type=='Array' || type=='Object' || type=='Function')  { ret+='<i>'+((o.nodeName)? 'HTML Element': type)+'</i>: <span style="'+elements+'">'+((o.nodeName)? o.tagName + (o.id || o.name? ' ('+(o.id || o.name)+')': ''): name)+'</span>\n'+"<span style='"+braces+"'>{</span>\n";var c= 0; for(var p in o)   {  c++;  if(o == o[p])    {   ret+= level+"["+p+"] => <i style='"+rec+"'>RECURSIVENESS</i>\n";  }else{    if(o[p]!= null && (o[p].constructor == Array|| o[p].constructor == Object || o[p].constructor == Function || o[p].constructor.name ==''))      {     ret+= level+"["+p+"] => "+typeof o[p];     ret+= print_j(o[p], level+'      ', p);    }else{      type= typeof o[p];      if(type=='string' && o[p].length == 1)         type='char';      if(type=='number')         if((''+o[p]).indexOf('.')>=0)          type='real';       else          type='integer'; var quotes= type=='char'||type=='string'? '"': '';      if(quotes =='')         ret+= level+"["+p+": <i>"+type+"</i>] => <span style='"+(!isNaN(o[p])&& typeof o[p]!='boolean'? numbers: elements)+"'>"+o[p]+"</span> \n";      else         ret+= level+"["+p+": <i>"+type+"</i>] => <span style='"+charString+"'>"+quotes+o[p]+quotes+"</span> \n";      }     }   }   if(c==0)   {  if(o instanceof Date)     ret+= level+'date=> '+o+'\n';  else if(o instanceof RegExp)      ret+= level+'Regular Expression=> <span style="'+charString+'">'+o+'</span>\n'; }   if(o instanceof Function)    ret+= level+"<div style='background-color:#ddf; margin-left:"+(level.length/6 * 12 + level.length)+"px;'>Content=> ("+(typeof o=='string'? o.replace('/\</g', '&lt;'): o)+")()</div>\n"; ret+="<span style='"+braces+"'>}</span>\n";}else{  type= typeof o;  if(type=='string' && o.length == 1)     type='char';  if(type=='number')     if((''+o).indexOf('.')>=0)      type='real';   else      type='integer';var quotes= type=='char'||type=='string'? '"': '';  ret+= (/^\/.*\/$/ig.test(o)? 'Regular Expression': (/^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})$/.test(o))? 'Date string': type)+': '+name+'=> <span style="'+((isNaN(o))? charString: numbers)+'">'+quotes+o+quotes+'</span>\n';  }  ret+="\n</pre></div>";return ret; }